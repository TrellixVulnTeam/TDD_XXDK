package com.curso.modelo.negocio;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InOrder;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import com.curso.modelo.entidad.Cliente;
import com.curso.modelo.entidad.Comercial;
import com.curso.modelo.entidad.Sucursal;
import com.curso.modelo.negocio.excepcion.DireccionException;
import com.curso.modelo.negocio.excepcion.SucursalException;
import com.curso.modelo.persistencia.ClienteDao;

//Podemos crear los mocks invocando Mockito.mock()
//o usando anotaciones. 
@ExtendWith(MockitoExtension.class)
public class GestorClientesTest {

	private GestorClientes gestorClientes;
	private GestorSucursales gestorSucursales;
	private GestorComerciales gestorComerciales;
	private GestorDirecciones gestorDirecciones;

	@Mock
	private ClienteDao clienteDao; //= mock(ClienteDao.class);

	@BeforeEach
	public void inicializar() {
		gestorClientes = new GestorClientes();
		//RESOLVEMOS LAS DEPENDENCIAS CON MOCKS
		gestorClientes.setGestorSucursales(getGestorSucursalesMock());
		gestorClientes.setGestorComerciales(getGestorComercialesMock());
		gestorClientes.setGestorDirecciones(getGestorDireccionesMock());		
		gestorClientes.setClienteDao(getClienteDaoMock());
	}

	//Mock de gestor sucursales
	private GestorSucursales getGestorSucursalesMock() {
		gestorSucursales = mock(GestorSucursales.class);
		try {
			Mockito.lenient().when(gestorSucursales.encontrarSucursalCercana(any(String.class))).thenReturn(new Sucursal(1,"Sucursal1","C/Falsa,123"));
			Mockito.lenient().when(gestorSucursales.encontrarSucursalCercana(null)).thenThrow(new SucursalException());
		} catch (SucursalException e) {
			e.printStackTrace();
		}
		return gestorSucursales;
	}
	
	//Mock de gestor comerciales
	private GestorComerciales getGestorComercialesMock() {
		gestorComerciales = mock(GestorComerciales.class);
		List<Comercial> comerciales = new ArrayList<Comercial>() {{
			this.add(new Comercial(1,"EMP-1","Comercial1"));
			this.add(new Comercial(2,"EMP-2","Comercial2"));
		}};
		Mockito.lenient().when(gestorComerciales.encontrarComerciales()).thenReturn(comerciales);
		return gestorComerciales;
	}
	
	
	//Mock de gestor direcciones (métodos void)
	private GestorDirecciones getGestorDireccionesMock() {
		gestorDirecciones = mock(GestorDirecciones.class);
		try {
			Mockito.lenient().doNothing().when(gestorDirecciones).comprobarDireccion(Mockito.anyString());
			Mockito.lenient().doThrow(new DireccionException("Dirección nula")).when(gestorDirecciones).comprobarDireccion(null);
			Mockito.lenient().doThrow(new DireccionException("Esta direccion es falsa")).when(gestorDirecciones).comprobarDireccion("C/Falsa, 123");
		} catch (DireccionException e) {
			e.printStackTrace();
		}
		return gestorDirecciones;
	}
	
	//Mock de ClienteDao (métodos con código)
	private ClienteDao getClienteDaoMock() {
		
		//Cliente clienteInsertado = new Cliente(1,"N","D","T");
		//when(clienteDao.insertar(any(Cliente.class))).thenReturn(clienteInsertado);
		
		//Devuelve el mismo objeto recibido (sea el que sea)
		//when(((OngoingStubbing) clienteDao.insertar(any(Cliente.class))).thenReturn(AdditionalAnswers.returnsFirstArg()));
				
		//Devuelve el mismo objeto recibido pero con id
		
		//thenReturn, doReturn: cuando sabemos que vamos a devolver
		//thenAnswer, doAnswer: cuando necesitamos cierto cñodigo para crear el valor a devolver
		
		/*Con clase interna anonima
		when(clienteDao.insertar(any(Cliente.class))).thenAnswer(new Answer<Cliente>() {
			public Cliente answer(InvocationOnMock i) throws Throwable {
				Cliente c = (Cliente) i.getArgument(0);
				c.setId(1);
				return c;
			}
		});
		*/
		
		//Lo mismo pero con una expresión lambda
		//Este en vez de crearlo nosotros nos lo inyectan gracias a la anotacion @Mock
		//clienteDao = mock(ClienteDao.class);
		Mockito.lenient().when(clienteDao.insertar(any(Cliente.class))).thenAnswer( 
			 i -> {
				Cliente c = (Cliente) i.getArgument(0);
				c.setId(1);
				return c;
			}
		);
		
		/*Con la otra sintaxis
		Mockito.doAnswer(new Answer<Cliente>() {
			public Cliente answer(InvocationOnMock i) throws Throwable {
				Cliente c = (Cliente) i.getArgument(0);
				c.setId(1);
				return c;
			}
		}).when(clienteDao.insertar(any(Cliente.class)));
		*/
		
		return clienteDao;
	}

	@Test
	public void altaClienteTest() throws Exception {
		
		Cliente cliente = new Cliente(null,"Nombre","Direccion","Telefono");

		Cliente clienteInsertado = null;
		clienteInsertado = gestorClientes.altaCliente(cliente);
		System.out.println(clienteInsertado);
				
		assertTrue(clienteInsertado.getComerciales().size()==2);
		assertTrue(clienteInsertado.getSucursal()!=null);
		assertTrue(clienteInsertado.getId()!=null);
		
		//Los mocks de Mockito guardan como estado las llamadas que han 
		//recibido, el número y el orden de las mismas
		//
		//Si usamos esta característica de mockito estamos dando por sentado que el test conoce 
		//el funcionamiento interno del metodo 'altaCliente'. La prueba deja de ser de tipo 'caja negra'
		//y pasa a ser algo más parecido a un test de integración que a uno unitario.
		//
		//Conclusión: mucho cuidado con esto
		//
		try {
			//Verificamos que gestorClientes ha llamado a los métodos adecuados
			//Esto es posible porque los mocks recuerdan las llamadas recibidas
			Mockito.verify(clienteDao).insertar(cliente);
			Mockito.verify(gestorComerciales).encontrarComerciales();
			Mockito.verify(gestorSucursales).encontrarSucursalCercana(any(String.class));
			Mockito.verify(gestorSucursales).encontrarSucursalCercana(cliente.getDireccion());
		
			//Tambien recuerda cuantas veces y podemos comprobar si se han realizado las esperadas
			Mockito.verify(clienteDao, Mockito.times(1)).insertar(cliente);
			Mockito.verify(gestorComerciales, Mockito.times(1)).encontrarComerciales();
			Mockito.verify(gestorSucursales, Mockito.times(1)).encontrarSucursalCercana(cliente.getDireccion());

			//Podemos verificar el orden de las llamadas
		    InOrder ordered = Mockito.inOrder(gestorSucursales, gestorComerciales, clienteDao);	
		    ordered.verify(gestorSucursales).encontrarSucursalCercana(cliente.getDireccion());
		    ordered.verify(gestorComerciales).encontrarComerciales();
		    ordered.verify(clienteDao).insertar(cliente);
					
		} catch (SucursalException e) {
			e.printStackTrace();
		}		
		
	}
	
	@Test
	public void altaClienteTestDireccionNula() {
		
		Cliente cliente = new Cliente(null,"Nombre",null,"Telefono");

		DireccionException ex = assertThrows(DireccionException.class, () -> gestorClientes.altaCliente(cliente));
		System.out.println("MENSAJE:"+ex.getMessage());
		assertTrue(ex.getMessage().equals("Dirección nula"));				
		
	}

	@Test
	public void altaClienteTestDireccionFalsa() {
		
		Cliente cliente = new Cliente(null,"Nombre","C/Falsa, 123","Telefono");
		
		DireccionException ex = assertThrows(DireccionException.class, () -> gestorClientes.altaCliente(cliente));
		assertTrue(ex.getMessage().equals("Esta direccion es falsa"));				
		
	}
	
}



















