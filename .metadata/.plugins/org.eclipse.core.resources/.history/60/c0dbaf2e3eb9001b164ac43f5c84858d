package ejemplos;

import java.util.stream.Stream;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.junit.jupiter.params.provider.ValueSource;

import com.curso.modelo.negocio.Calculadora;
import com.curso.modelo.negocio.CalculadoraImpuestos;
import com.curso.modelo.negocio.InvalidIngresoException;

public class _07_TestParametrizado {

	private CalculadoraImpuestos calculadoraImpuestos;
	private Calculadora calculadora;
	
	@BeforeEach
	public void inicializar() {
		calculadoraImpuestos = new CalculadoraImpuestos();
		calculadora = new Calculadora();
	}

	public _07_TestParametrizado() {
		super();
		System.out.println("Instanciando TestParametrizado");
	}
	
	/*
	<dependency>
		<groupId>org.junit.jupiter</groupId>
		<artifactId>junit-jupiter-params</artifactId>
		<version>5.5.2</version>
		<scope>test</scope>
	</dependency>	
	*/
	
	@ParameterizedTest
	@ValueSource(doubles = { 5, 25, 50, 75 })
	@DisplayName("Prueba de test parametrizado")
	public void ejemplo(Double numero) {
		//Dado este número
		System.out.println("Parámetro:"+numero);
		//Cuando 
		double resultado = calculadora.cuadrado(2d);
		//Entonces
		Assertions.assertTrue(resultado == 2d*2d);	
		//Lo mismo, con equals
		Assertions.assertEquals(resultado, 2d*2d);	
	}

	
	/*
	@ParameterizedTest(name = "CalculadoraImpuestos {index}: El impuesto de {0} debe ser {1}")
	@MethodSource("datosParaProbarCalculadoraImpuestos")
	void testWithMultiArgMethodSource(Double ingreso, Double impuesto) throws InvalidIngresoException {
		System.out.println(ingreso+","+impuesto);
		double resultado = calculadoraImpuestos.calcularImpuestosSobreIngreso(ingreso);
	    Assertions.assertEquals(impuesto, resultado);
	}

	//Es obligatorio que sea estático
	static Stream<Arguments> datosParaProbarCalculadoraImpuestos() {
		return Stream.of(
	        Arguments.arguments(5000d,0d),
	        Arguments.arguments(10000d,800d),
	        Arguments.arguments(17000d,1700d),
	        Arguments.arguments(22000d,3300d),
	        Arguments.arguments(35000d,6825d)
	    );	 
	}
	*/	
		
}
